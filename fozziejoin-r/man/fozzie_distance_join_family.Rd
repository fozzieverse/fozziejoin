% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fozzie_distance_join.R
\name{fozzie_distance_join_family}
\alias{fozzie_distance_join_family}
\alias{fozzie_distance_join}
\alias{fozzie_distance_inner_join}
\alias{fozzie_distance_left_join}
\alias{fozzie_distance_right_join}
\alias{fozzie_distance_full_join}
\alias{fozzie_distance_anti_join}
\alias{fozzie_distance_semi_join}
\title{Perform a fuzzy join between two data frames using vector distance matching.}
\usage{
fozzie_distance_join(
  df1,
  df2,
  by = NULL,
  how = "inner",
  max_distance = 1,
  method = "manhattan",
  distance_col = NULL,
  nthread = getOption("fozzie.nthread", NULL)
)

fozzie_distance_inner_join(
  df1,
  df2,
  by = NULL,
  max_distance = 1,
  method = "manhattan",
  distance_col = NULL,
  nthread = getOption("fozzie.nthread", NULL)
)

fozzie_distance_left_join(
  df1,
  df2,
  by = NULL,
  max_distance = 1,
  method = "manhattan",
  distance_col = NULL,
  nthread = getOption("fozzie.nthread", NULL)
)

fozzie_distance_right_join(
  df1,
  df2,
  by = NULL,
  max_distance = 1,
  method = "manhattan",
  distance_col = NULL,
  nthread = getOption("fozzie.nthread", NULL)
)

fozzie_distance_full_join(
  df1,
  df2,
  by = NULL,
  max_distance = 1,
  method = "manhattan",
  distance_col = NULL,
  nthread = getOption("fozzie.nthread", NULL)
)

fozzie_distance_anti_join(
  df1,
  df2,
  by = NULL,
  max_distance = 1,
  method = "manhattan",
  distance_col = NULL,
  nthread = getOption("fozzie.nthread", NULL)
)

fozzie_distance_semi_join(
  df1,
  df2,
  by = NULL,
  max_distance = 1,
  method = "manhattan",
  distance_col = NULL,
  nthread = getOption("fozzie.nthread", NULL)
)
}
\arguments{
\item{df1}{A data frame to join from (left table).}

\item{df2}{A data frame to join to (right table).}

\item{by}{A character vector of column names to match on. These columns must be numeric and present in both data frames.}

\item{how}{A string specifying the join mode. One of:
\itemize{
\item \code{"inner"}: matched pairs only.
\item \code{"left"}: all rows from \code{df1}, unmatched rows filled with NAs.
\item \code{"right"}: all rows from \code{df2}, unmatched rows filled with NAs.
\item \code{"full"}: all rows from both \code{df1} and \code{df2}.
\item \code{"anti"}: rows from \code{df1} not matched in \code{df2}.
\item \code{"semi"}: rows from \code{df1} that matched with one or more matches in \code{df2}.
}}

\item{max_distance}{A numeric threshold for allowable vector distance between rows.}

\item{method}{A string specifying the distance metric. One of:
\itemize{
\item \code{"manhattan"}: sum of absolute differences.
\item \code{"euclidean"}: square root of sum of squared differences.
}}

\item{distance_col}{Optional name of column to store computed distances.}

\item{nthread}{Optional integer specifying the number of threads to use for
parallelization. If not provided, the value is determined by
\code{options("fozzie.nthread")}. The package default is inherited from
Rayon, the multithreading library used throughout the package.}
}
\value{
A data frame with approximately matched rows depending on the join type. If \code{distance_col} is specified, an additional numeric column is included.
}
\description{
\code{fozzie_distance_join()} and its directional variants (\code{fozzie_distance_inner_join()}, \code{fozzie_distance_left_join()}, \code{fozzie_distance_right_join()}, \code{fozzie_distance_anti_join()}, \code{fozzie_distance_full_join()})
enable approximate matching of numeric fields in two data frames based on vector distance thresholds.
These joins are analogous to \code{fuzzyjoin::distance_join}, but implemented in Rust for performance.
}
\examples{
df1 <- data.frame(x = c(1.0, 2.0), y = c(3.0, 4.0))
df2 <- data.frame(x = c(1.1, 2.1), y = c(3.1, 4.1))

fozzie_distance_inner_join(df1, df2, by = c("x", "y"), max_distance = 0.3, method = "euclidean")

}
