% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fozzie_regex_join.R
\name{fozzie_regex_join_family}
\alias{fozzie_regex_join_family}
\alias{fozzie_regex_join}
\alias{fozzie_regex_inner_join}
\alias{fozzie_regex_left_join}
\alias{fozzie_regex_right_join}
\alias{fozzie_regex_anti_join}
\alias{fozzie_regex_full_join}
\alias{fozzie_regex_semi_join}
\title{Perform a fuzzy join between two data frames using regex pattern matching.}
\usage{
fozzie_regex_join(
  df1,
  df2,
  by = NULL,
  how = "inner",
  ignore_case = FALSE,
  nthread = getOption("fozzie.nthread", NULL)
)

fozzie_regex_inner_join(
  df1,
  df2,
  by = NULL,
  ignore_case = FALSE,
  nthread = getOption("fozzie.nthread", NULL)
)

fozzie_regex_left_join(
  df1,
  df2,
  by = NULL,
  ignore_case = FALSE,
  nthread = getOption("fozzie.nthread", NULL)
)

fozzie_regex_right_join(
  df1,
  df2,
  by = NULL,
  ignore_case = FALSE,
  nthread = getOption("fozzie.nthread", NULL)
)

fozzie_regex_anti_join(
  df1,
  df2,
  by = NULL,
  ignore_case = FALSE,
  nthread = getOption("fozzie.nthread", NULL)
)

fozzie_regex_full_join(
  df1,
  df2,
  by = NULL,
  ignore_case = FALSE,
  nthread = getOption("fozzie.nthread", NULL)
)

fozzie_regex_semi_join(
  df1,
  df2,
  by = NULL,
  ignore_case = FALSE,
  nthread = getOption("fozzie.nthread", NULL)
)
}
\arguments{
\item{df1}{A data frame to join from (left table).}

\item{df2}{A data frame to join to (right table).}

\item{by}{A named list or character vector indicating the matching columns. Can be a character vector of length 2, e.g. \code{c("col1", "col2")},
or a named list like \code{list(col1 = "col2")}.}

\item{how}{A string specifying the join mode. One of:
\itemize{
\item \code{"inner"}: matched pairs only.
\item \code{"left"}: all rows from \code{df1}, unmatched rows filled with NAs.
\item \code{"right"}: all rows from \code{df2}, unmatched rows filled with NAs.
\item \code{"full"}: all rows from both \code{df1} and \code{df2}.
\item \code{"anti"}: rows from \code{df1} not matched in \code{df2}.
\item \code{"semi"}: rows from \code{df1} that matched with one or more matches in \code{df2}.
}}

\item{ignore_case}{Should be case insensitive. Default is FALSE.}

\item{nthread}{Optional integer specifying the number of threads to use for
parallelization. If not provided, the value is determined by
\code{options("fozzie.nthread")}. The package default is inherited from
Rayon, the multithreading library used throughout the package.}
}
\value{
A data frame with approximately matched rows depending on the join type. See individual functions like \code{fozzie_regex_inner_join()} for examples.
}
\description{
\code{fozzie_regex_join()} and its directional variants (\code{fozzie_regex_inner_join()}, \code{fozzie_regex_left_join()}, \code{fozzie_regex_right_join()}, \code{fozzie_regex_anti_join()}, \code{fozzie_regex_full_join()}, \code{fozzie_regex_semi_join()})
enable approximate matching of string fields in two data frames using regular expressions.
These joins are analogous to \code{fuzzyjoin::regex_join}, but implemented in Rust for performance.
}
\details{
The right-hand column (from \code{df2}) is treated as a vector of regex patterns, and each value in the left-hand column (from \code{df1}) is matched against those patterns.
}
\examples{
df1 <- data.frame(name = c("apple", "banana", "cherry"))
df2 <- data.frame(pattern = c("^a", "an", "rry$"))

fozzie_regex_inner_join(df1, df2, by = c("name" = "pattern"))
fozzie_regex_left_join(df1, df2, by = c("name" =  "pattern"))

}
